@InProceedings{gibbonsSquiggol,
  author="Gibbons, Jeremy",
  title="The School of Squiggol",
  booktitle="Formal Methods. FM 2019 International Workshops",
  year="2020",
  publisher="Springer International Publishing",
  address="Cham",
  pages="35--53",
  isbn="978-3-030-54997-8"
}


@InProceedings{keller_et_al:LIPIcs.CSL.2012.381,
  author =	{Keller, Chantal and Lasson, Marc},
  title =	{{Parametricity in an Impredicative Sort}},
  booktitle =	{Computer Science Logic (CSL'12) - 26th International Workshop/21st Annual Conference of the EACSL},
  pages =	{381--395},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-939897-42-2},
  ISSN =	{1868-8969},
  year =	{2012},
  volume =	{16},
  editor =	{C\'{e}gielski, Patrick and Durand, Arnaud},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URN =		{urn:nbn:de:0030-drops-36851},
  doi =		{10.4230/LIPIcs.CSL.2012.381},
  annote =	{Keywords: Calculus of Inductive Constructions, parametricity, impredicativity, Coq, universes}
}

@inproceedings{farmsCastro,
  author = {Castro-Perez, David and Hammond, Kevin and Sarkar, Susmit},
  title = {Farms, pipes, streams and reforestation: reasoning about structured parallel processes using types and hylomorphisms},
  year = {2016},
  publisher = {ACM},
  doi = {10.1145/2951913.2951920},
  booktitle = {Proc. of the 21st ACM SIGPLAN International Conference on Functional Programming},
  pages = {4â€“17},
  numpages = {14},
  series = {ICFP 2016}
}

@inproceedings{HinzeWG15,
  author       = {Ralf Hinze and
                  Nicolas Wu and
                  Jeremy Gibbons},
  editor       = {Sriram K. Rajamani and
                  David Walker},
  title        = {Conjugate Hylomorphisms - Or: The Mother of All Structured Recursion
                  Schemes},
  booktitle    = {Proceedings of the 42nd Annual {ACM} {SIGPLAN-SIGACT} Symposium on
                  Principles of Programming Languages, {POPL} 2015, Mumbai, India, January
                  15-17, 2015},
  pages        = {527--538},
  publisher    = {{ACM}},
  year         = {2015},
  doi          = {10.1145/2676726.2676989},
  timestamp    = {Sat, 30 Sep 2023 09:54:52 +0200},
  biburl       = {https://dblp.org/rec/conf/popl/HinzeWG15.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DanielssonHJG06,
  author       = {Nils Anders Danielsson and
                  John Hughes and
                  Patrik Jansson and
                  Jeremy Gibbons},
  editor       = {J. Gregory Morrisett and
                  Simon L. Peyton Jones},
  title        = {Fast and loose reasoning is morally correct},
  booktitle    = {Proceedings of the 33rd {ACM} {SIGPLAN-SIGACT} Symposium on Principles
                  of Programming Languages, {POPL} 2006, Charleston, South Carolina,
                  USA, January 11-13, 2006},
  pages        = {206--217},
  publisher    = {{ACM}},
  year         = {2006},
  doi          = {10.1145/1111037.1111056},
  timestamp    = {Wed, 02 Mar 2022 21:39:33 +0100},
  biburl       = {https://dblp.org/rec/conf/popl/DanielssonHJG06.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{AbbottAG05,
  author       = {Michael Gordon Abbott and
                  Thorsten Altenkirch and
                  Neil Ghani},
  title        = {Containers: Constructing strictly positive types},
  journal      = {Theor. Comput. Sci.},
  volume       = {342},
  number       = {1},
  pages        = {3--27},
  year         = {2005},
  doi          = {10.1016/J.TCS.2005.06.002},
  timestamp    = {Wed, 17 Feb 2021 22:01:07 +0100},
  biburl       = {https://dblp.org/rec/journals/tcs/AbbottAG05.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{MeijerFP91,
  author       = {Erik Meijer and
                  Maarten M. Fokkinga and
                  Ross Paterson},
  editor       = {John Hughes},
  title        = {Functional Programming with Bananas, Lenses, Envelopes and Barbed
                  Wire},
  booktitle    = {Functional Programming Languages and Computer Architecture, 5th {ACM}
                  Conference, Cambridge, MA, USA, August 26-30, 1991, Proceedings},
  series       = {Lecture Notes in Computer Science},
  publisher    = {Springer},
  year         = {1991},
  url          = {https://doi.org/10.1007/3540543961\_7},
  doi          = {10.1007/3540543961\_7},
}

@inproceedings{HuIT96,
  author       = {Zhenjiang Hu and
                  Hideya Iwasaki and
                  Masato Takeichi},
  editor       = {Robert Harper and
                  Richard L. Wexelblat},
  title        = {Deriving Structural Hylomorphisms From Recursive Definitions},
  booktitle    = {Proceedings of the 1996 {ACM} {SIGPLAN} International Conference on
                  Functional Programming, {ICFP} 1996, Philadelphia, Pennsylvania, USA,
                  May 24-26, 1996},
  pages        = {73--82},
  publisher    = {{ACM}},
  year         = {1996},
  url          = {https://doi.org/10.1145/232627.232637},
  doi          = {10.1145/232627.232637},
  timestamp    = {Sun, 25 Jul 2021 11:45:03 +0200},
  biburl       = {https://dblp.org/rec/conf/icfp/HuIT96.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{McBride15,
  author       = {Conor McBride},
  editor       = {Ralf Hinze and
                  Janis Voigtl{\"{a}}nder},
  title        = {Turing-Completeness Totally Free},
  booktitle    = {Mathematics of Program Construction - 12th International Conference,
                  {MPC} 2015, K{\"{o}}nigswinter, Germany, June 29 - July 1, 2015.
                  Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {9129},
  pages        = {257--275},
  publisher    = {Springer},
  year         = {2015},
  doi          = {10.1007/978-3-319-19797-5\_13},
  timestamp    = {Tue, 14 May 2019 10:00:46 +0200},
  biburl       = {https://dblp.org/rec/conf/mpc/McBride15.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{BoveC01,
  author       = {Ana Bove and
                  Venanzio Capretta},
  editor       = {Richard J. Boulton and
                  Paul B. Jackson},
  title        = {Nested General Recursion and Partiality in Type Theory},
  booktitle    = {Theorem Proving in Higher Order Logics, 14th International Conference,
                  TPHOLs 2001, Edinburgh, Scotland, UK, September 3-6, 2001, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {2152},
  pages        = {121--135},
  publisher    = {Springer},
  year         = {2001},
  doi          = {10.1007/3-540-44755-5\_10},
  timestamp    = {Thu, 14 Oct 2021 10:41:13 +0200},
  biburl       = {https://dblp.org/rec/conf/tphol/BoveC01.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{AtkeyM13,
  author       = {Robert Atkey and
                  Conor McBride},
  editor       = {Greg Morrisett and
                  Tarmo Uustalu},
  title        = {Productive coprogramming with guarded recursion},
  booktitle    = {{ACM} {SIGPLAN} International Conference on Functional Programming,
                  ICFP'13, Boston, MA, {USA} - September 25 - 27, 2013},
  pages        = {197--208},
  publisher    = {{ACM}},
  year         = {2013},
  doi          = {10.1145/2500365.2500597},
  timestamp    = {Thu, 24 Jun 2021 16:19:30 +0200},
  biburl       = {https://dblp.org/rec/conf/icfp/AtkeyM13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{PaviottiMB15,
  author       = {Marco Paviotti and
                  Rasmus Ejlers M{\o}gelberg and
                  Lars Birkedal},
  editor       = {Dan R. Ghica},
  title        = {A Model of {PCF} in Guarded Type Theory},
  booktitle    = {The 31st Conference on the Mathematical Foundations of Programming
                  Semantics, {MFPS} 2015, Nijmegen, The Netherlands, June 22-25, 2015},
  series       = {Electronic Notes in Theoretical Computer Science},
  volume       = {319},
  pages        = {333--349},
  publisher    = {Elsevier},
  year         = {2015},
  doi          = {10.1016/J.ENTCS.2015.12.020},
  timestamp    = {Tue, 16 Aug 2022 23:07:08 +0200},
  biburl       = {https://dblp.org/rec/journals/entcs/PaviottiMB15.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{HurNDV13,
  author       = {Chung{-}Kil Hur and
                  Georg Neis and
                  Derek Dreyer and
                  Viktor Vafeiadis},
  editor       = {Roberto Giacobazzi and
                  Radhia Cousot},
  title        = {The power of parameterization in coinductive proof},
  booktitle    = {The 40th Annual {ACM} {SIGPLAN-SIGACT} Symposium on Principles of
                  Programming Languages, {POPL} '13, Rome, Italy - January 23 - 25,
                  2013},
  pages        = {193--206},
  publisher    = {{ACM}},
  year         = {2013},
  doi          = {10.1145/2429069.2429093},
  timestamp    = {Thu, 24 Jun 2021 16:19:31 +0200},
  biburl       = {https://dblp.org/rec/conf/popl/HurNDV13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{AbelP16,
  author       = {Andreas Abel and
                  Brigitte Pientka},
  title        = {Well-founded recursion with copatterns and sized types},
  journal      = {J. Funct. Program.},
  volume       = {26},
  pages        = {e2},
  year         = {2016},
  doi          = {10.1017/S0956796816000022},
  timestamp    = {Sat, 27 May 2017 14:24:34 +0200},
  biburl       = {https://dblp.org/rec/journals/jfp/0001P16.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{AbelPTS13,
  author       = {Andreas Abel and
                  Brigitte Pientka and
                  David Thibodeau and
                  Anton Setzer},
  editor       = {Roberto Giacobazzi and
                  Radhia Cousot},
  title        = {Copatterns: programming infinite structures by observations},
  booktitle    = {The 40th Annual {ACM} {SIGPLAN-SIGACT} Symposium on Principles of
                  Programming Languages, {POPL} '13, Rome, Italy - January 23 - 25,
                  2013},
  pages        = {27--38},
  publisher    = {{ACM}},
  year         = {2013},
  doi          = {10.1145/2429069.2429075},
  timestamp    = {Thu, 24 Jun 2021 16:19:31 +0200},
  biburl       = {https://dblp.org/rec/conf/popl/AbelPTS13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{TakanoM95,
  author = {Takano, Akihiko and Meijer, Erik},
  title = {Shortcut deforestation in calculational form},
  year = {1995},
  isbn = {0897917197},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/224164.224221},
  booktitle = {Proceedings of the Seventh International Conference on Functional Programming Languages and Computer Architecture},
  pages = {306â€“313},
  numpages = {8},
  location = {La Jolla, California, USA},
  series = {FPCA '95}
}


@article{Gibbons96:Third,
  title = "The Third Homomorphism Theorem",
  author = "Jeremy Gibbons",
  year = "1996",
  journal = "Journal of Functional Programming",
  note = "Earlier version appeared in C.\,B.\,Jay, editor, {\it Computing: The Australian Theory Seminar}, Sydney, December~1994, p.\,62--69",
  number = "4",
  pages = "657--665",
  url = "http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/thirdht.ps.gz",
  volume = "6",
}

@incollection{larchey2022braga,
  title={The Braga method: Extracting certified algorithms from complex recursive schemes in Coq},
  author={Larchey-Wendling, Dominique and Monin, Jean-Fran{\c{c}}ois},
  booktitle={PROOF AND COMPUTATION II: From Proof Theory and Univalent Mathematics to Program Extraction and Verification},
  pages={305--386},
  year={2022},
  publisher={World Scientific}
}

@article{Sakaguchi20,
  title = {Program extraction for mutable arrays},
  journal = {Science of Computer Programming},
  volume = {191},
  pages = {102372},
  year = {2020},
  issn = {0167-6423},
  doi = {https://doi.org/10.1016/j.scico.2019.102372},
  url = {https://www.sciencedirect.com/science/article/pii/S0167642319301650},
  author = {Kazuhiko Sakaguchi},
  keywords = {Interactive theorem proving, Formally verified software, The Coq proof assistant, Program extraction, Program transformation and optimization}
}

@InProceedings{MurataE19,
  author="Murata, Kosuke
  and Emoto, Kento",
  editor="Lin, Anthony Widjaja",
  title="Recursion Schemes in Coq",
  booktitle="Programming Languages and Systems",
  year="2019",
  publisher="Springer International Publishing",
  address="Cham",
  pages="202--221",
  isbn="978-3-030-34175-6"
}


@article{AbreuDHJMS23,
  author = {Abreu, Pedro and Delaware, Benjamin and Hubers, Alex and Jenkins, Christa and Morris, J. Garrett and Stump, Aaron},
  title = {A Type-Based Approach to Divide-and-Conquer Recursion in Coq},
  year = {2023},
  issue_date = {January 2023},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {7},
  number = {POPL},
  url = {https://doi.org/10.1145/3571196},
  doi = {10.1145/3571196},
  journal = {Proc. ACM Program. Lang.},
  month = {jan},
  articleno = {3},
  numpages = {30},
  keywords = {Divide-and-conquer recursion, strong functional programming, well-founded recursion}
}
            
@inproceedings{HughesPS96,
  author       = {John Hughes and
                  Lars Pareto and
                  Amr Sabry},
  editor       = {Hans{-}Juergen Boehm and
                  Guy L. Steele Jr.},
  title        = {Proving the Correctness of Reactive Systems Using Sized Types},
  booktitle    = {Conference Record of POPL'96: The 23rd {ACM} {SIGPLAN-SIGACT} Symposium
                  on Principles of Programming Languages, Papers Presented at the Symposium,
                  St. Petersburg Beach, Florida, USA, January 21-24, 1996},
  pages        = {410--423},
  publisher    = {{ACM} Press},
  year         = {1996},
  doi          = {10.1145/237721.240882},
  timestamp    = {Wed, 16 Mar 2022 22:31:09 +0100},
  biburl       = {https://dblp.org/rec/conf/popl/HughesPS96.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{CopelloTB14,
  author       = {Ernesto Copello and
                  Alvaro Tasistro and
                  Bruno Bianchi},
  editor       = {Fernando Magno Quint{\~{a}}o Pereira},
  title        = {Case of (Quite) Painless Dependently Typed Programming: Fully Certified
                  Merge Sort in Agda},
  booktitle    = {Programming Languages - 18th Brazilian Symposium, {SBLP} 2014, Maceio,
                  Brazil, October 2-3, 2014. Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {8771},
  pages        = {62--76},
  publisher    = {Springer},
  year         = {2014},
  doi          = {10.1007/978-3-319-11863-5\_5},
  timestamp    = {Sat, 30 Sep 2023 09:55:47 +0200},
  biburl       = {https://dblp.org/rec/conf/sblp/CopelloTB14.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{abs-1202-3496,
  author       = {Andreas Abel},
  editor       = {Dale Miller and
                  Zolt{\'{a}}n {\'{E}}sik},
  title        = {Type-Based Termination, Inflationary Fixed-Points, and Mixed Inductive-Coinductive
                  Types},
  booktitle    = {Proceedings 8th Workshop on Fixed Points in Computer Science, {FICS}
                  2012, Tallinn, Estonia, 24th March 2012},
  series       = {{EPTCS}},
  volume       = {77},
  pages        = {1--11},
  year         = {2012},
  doi          = {10.4204/EPTCS.77.1},
  timestamp    = {Sat, 09 Apr 2022 12:27:12 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-1202-3496.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
       
@unpublished{forster:hal-04329663,
  TITLE = {{Verified Extraction from Coq to OCaml}},
  AUTHOR = {Forster, Yannick and Sozeau, Matthieu and Tabareau, Nicolas},
  URL = {https://inria.hal.science/hal-04329663},
  NOTE = {working paper or preprint},
  YEAR = {2023},
  MONTH = Nov,
  KEYWORDS = {Verified compilation ; Extraction ; Functional languages ; Coq},
  PDF = {https://inria.hal.science/hal-04329663/file/main.pdf},
  HAL_ID = {hal-04329663},
  HAL_VERSION = {v1},
}
@article{HinzeW16,
  author       = {Ralf Hinze and
                  Nicolas Wu},
  title        = {Unifying structured recursion schemes - An Extended Study},
  journal      = {J. Funct. Program.},
  volume       = {26},
  pages        = {e1},
  year         = {2016},
  doi          = {10.1017/S0956796815000258},
  timestamp    = {Sat, 19 Oct 2019 19:29:27 +0200},
  biburl       = {https://dblp.org/rec/journals/jfp/HinzeW16.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{MiculanP12,
  author       = {Marino Miculan and
                  Marco Paviotti},
  editor       = {Lennart Beringer and
                  Amy P. Felty},
  title        = {Synthesis of Distributed Mobile Programs Using Monadic Types in Coq},
  booktitle    = {Interactive Theorem Proving - Third International Conference, {ITP}
                  2012, Princeton, NJ, USA, August 13-15, 2012. Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {7406},
  pages        = {183--200},
  publisher    = {Springer},
  year         = {2012},
  doi          = {10.1007/978-3-642-32347-8\_13},
  timestamp    = {Tue, 29 Dec 2020 18:37:35 +0100},
  biburl       = {https://dblp.org/rec/conf/itp/MiculanP12.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{YangW22,
  author       = {Zhixuan Yang and
                  Nicolas Wu},
  editor       = {Ekaterina Komendantskaya},
  title        = {Fantastic Morphisms and Where to Find Them - {A} Guide to Recursion
                  Schemes},
  booktitle    = {Mathematics of Program Construction - 14th International Conference,
                  {MPC} 2022, Tbilisi, Georgia, September 26-28, 2022, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {13544},
  pages        = {222--267},
  publisher    = {Springer},
  year         = {2022},
  doi          = {10.1007/978-3-031-16912-0\_9},
  timestamp    = {Tue, 18 Oct 2022 22:16:56 +0200},
  biburl       = {https://dblp.org/rec/conf/mpc/YangW22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{BoveKS16,
title={Partiality and recursion in interactive theorem provers â€“ an overview},
volume={26}, DOI={10.1017/S0960129514000115}, number={1},
journal={Mathematical Structures in Computer Science},
author={Bove, Ana and Krauss, Alexander and Sozeau, Matthieu}, year={2016}, pages={38â€“88}}

@inproceedings{Eduardo94,
author = {Gim\'{e}nez, Eduardo},
title = {Codifying Guarded Definitions with Recursive Schemes},
year = {1994},
isbn = {3540605797},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Selected Papers from the International Workshop on Types for Proofs and Programs},
pages = {39â€“59},
numpages = {21},
series = {TYPES '94}
}

@article{ChanLB23,
  author       = {Jonathan Chan and
                  Yufeng Li and
                  William J. Bowman},
  title        = {Is sized typing for Coq practical?},
  journal      = {J. Funct. Program.},
  volume       = {33},
  pages        = {e1},
  year         = {2023},
  doi          = {10.1017/S0956796822000120},
  timestamp    = {Sat, 25 Feb 2023 21:34:54 +0100},
  biburl       = {https://dblp.org/rec/journals/jfp/ChanLB23.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{10.1007/978-3-642-17796-5_10,
	abstract = {Program calculation, being a programming technique that derives programs from specification by means of formula manipulation, is a challenging activity. It requires human insights and creativity, and needs systems to help human to focus on clever parts of the derivation by automating tedious ones and verifying correctness of transformations. Different from many existing systems, we show in this paper that Coq, a popular theorem prover, provides a cheap way to implement a powerful system to support program calculation, which has not been recognized so far. We design and implement a set of tactics for the Coq proof assistant to help the user to derive programs by program calculation and to write proofs in calculational form. The use of these tactics is demonstrated through program calculations in Coq based on the theory of lists.},
	address = {Berlin, Heidelberg},
	author = {Tesson, Julien and Hashimoto, Hideki and Hu, Zhenjiang and Loulergue, Fr{\'e}d{\'e}ric and Takeichi, Masato},
	booktitle = {Algebraic Methodology and Software Technology},
	editor = {Johnson, Michael and Pavlovic, Dusko},
	isbn = {978-3-642-17796-5},
	pages = {163--179},
	publisher = {Springer Berlin Heidelberg},
	title = {Program Calculation in Coq},
	year = {2011}}

@inproceedings{10.1007/978-3-030-34175-6_11,
	abstract = {Program calculation, a programming technique to derive efficient programs from naive ones by program transformation, is challenging for program optimization. Tesson et al. have shown that Coq, a popular proof assistant, provides a cost-effective way to implement a powerful system for verifying correctness of program transformations, but their applications are limited to list functions in the Theory of Lists. In this paper, we propose an easy-to-use Coq library to prove more advanced calculation rules in Coq for various recursion schemes, which capture recursive programs on an arbitrary algebraic datatype. We prove all the lemmas and theorems about recursion schemes in Coq including histomorphisms and futumorphisms proposed by Uustalu et al. Our library can be used to obtain certified runnable programs from their definitions written with recursion schemes in Coq scripts. We demonstrate a certified runnable program for the Fibonacci numbers and unbounded knapsack problem from their histomorphic definitions.},
	address = {Cham},
	author = {Murata, Kosuke and Emoto, Kento},
	booktitle = {Programming Languages and Systems},
	editor = {Lin, Anthony Widjaja},
	isbn = {978-3-030-34175-6},
	pages = {202--221},
	publisher = {Springer International Publishing},
	title = {Recursion Schemes in Coq},
	year = {2019}
}

@article{GonthierL09,
author = {Gonthier, Georges and Le, Roux},
year = {2009},
month = {01},
pages = {},
title = {An Ssreflect Tutorial}
}
@inproceedings{AdamekMM19,
author="Ad{\'a}mek, Ji{\v{r}}{\'i}
and Milius, Stefan
and Moss, Lawrence S.",
editor="Goubault-Larrecq, Jean
and K{\"o}nig, Barbara",
title="On Well-Founded and Recursive Coalgebras",
booktitle="Foundations of Software Science and Computation Structures",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="17--36",
abstract="This paper studies fundamental questions concerning category-theoretic models of induction and recursion. We are concerned with the relationship between well-founded and recursive coalgebras for an endofunctor. For monomorphism preserving endofunctors on complete and well-powered categories every coalgebra has a well-founded part, and we provide a new, shorter proof that this is the coreflection in the category of all well-founded coalgebras. We present a new more general proof of Taylor's General Recursion Theorem that every well-founded coalgebra is recursive, and we study conditions which imply the converse. In addition, we present a new equivalent characterization of well-foundedness: a coalgebra is well-founded iff it admits a coalgebra-to-algebra morphism to the initial algebra.",
isbn="978-3-030-45231-5"
}

@inproceedings{CaprettaUV04,
  author       = {Venanzio Capretta and
                  Tarmo Uustalu and
                  Varmo Vene},
  editor       = {Jir{\'{\i}} Ad{\'{a}}mek and
                  Stefan Milius},
  title        = {Recursive Coalgebras from Comonads},
  booktitle    = {Proceedings of the Workshop on Coalgebraic Methods in Computer Science,
                  {CMCS} 2004, Barcelona, Spain, March 27-29, 2004},
  series       = {Electronic Notes in Theoretical Computer Science},
  volume       = {106},
  pages        = {43--61},
  publisher    = {Elsevier},
  year         = {2004},
  doi          = {10.1016/J.ENTCS.2004.02.034},
  timestamp    = {Fri, 12 Feb 2021 22:19:04 +0100},
  biburl       = {https://dblp.org/rec/journals/entcs/CaprettaUV04.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{OnoHTNH11,
  author       = {Kosuke Ono and
                  Yoichi Hirai and
                  Yoshinori Tanabe and
                  Natsuko Noda and
                  Masami Hagiya},
  editor       = {Gilles Barthe and
                  Alberto Pardo and
                  Gerardo Schneider},
  title        = {Using Coq in Specification and Program Extraction of Hadoop MapReduce
                  Applications},
  booktitle    = {Software Engineering and Formal Methods - 9th International Conference,
                  {SEFM} 2011, Montevideo, Uruguay, November 14-18, 2011. Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {7041},
  pages        = {350--365},
  publisher    = {Springer},
  year         = {2011},
  doi          = {10.1007/978-3-642-24690-6\_24},
  timestamp    = {Sat, 19 Oct 2019 20:16:56 +0200},
  biburl       = {https://dblp.org/rec/conf/sefm/OnoHTNH11.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{Larchey-Wendling23,
  author       = {Dominique Larchey{-}Wendling and
                  Jean{-}Fran{\c{c}}ois Monin},
  editor       = {Adam Naumowicz and
                  Ren{\'{e}} Thiemann},
  title        = {Proof Pearl: Faithful Computation and Extraction of {\(\mu\)}-Recursive
                  Algorithms in Coq},
  booktitle    = {14th International Conference on Interactive Theorem Proving, {ITP}
                  2023, July 31 to August 4, 2023, Bia{\l}ystok, Poland},
  series       = {LIPIcs},
  volume       = {268},
  pages        = {21:1--21:17},
  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
  year         = {2023},
  doi          = {10.4230/LIPICS.ITP.2023.21},
  timestamp    = {Wed, 26 Jul 2023 17:17:16 +0200},
  biburl       = {https://dblp.org/rec/conf/itp/Larchey-Wendling23.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{BirddeMoor96:Algebra,
  author       = {Richard S. Bird and
                  Oege de Moor},
  editor       = {Manfred Broy},
  title        = {The algebra of programming},
  booktitle    = {Proceedings of the {NATO} Advanced Study Institute on Deductive Program
                  Design, Marktoberdorf, Germany},
  pages        = {167--203},
  year         = {1996},
  timestamp    = {Tue, 14 Nov 2006 16:17:55 +0100},
  biburl       = {https://dblp.org/rec/conf/nato/BirdM96.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{Morihata09:Third,
  author       = {Akimasa Morihata and
                  Kiminori Matsuzaki and
                  Zhenjiang Hu and
                  Masato Takeichi},
  editor       = {Zhong Shao and
                  Benjamin C. Pierce},
  title        = {The third homomorphism theorem on trees: downward {\&} upward
                  lead to divide-and-conquer},
  booktitle    = {Proceedings of the 36th {ACM} {SIGPLAN-SIGACT} Symposium on Principles
                  of Programming Languages, {POPL} 2009, Savannah, GA, USA, January
                  21-23, 2009},
  pages        = {177--185},
  publisher    = {{ACM}},
  year         = {2009},
  doi          = {10.1145/1480881.1480905},
  timestamp    = {Thu, 14 Oct 2021 09:53:20 +0200},
  biburl       = {https://dblp.org/rec/conf/popl/MorihataMHT09.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DrHylo,
  author       = {Alcino Cunha and
                  Jorge Sousa Pinto and
                  Jos{\'{e}} Proen{\c{c}}a},
  editor       = {Andrew Butterfield and
                  Clemens Grelck and
                  Frank Huch},
  title        = {A Framework for Point-Free Program Transformation},
  booktitle    = {Implementation and Application of Functional Languages, 17th International
                  Workshop, {IFL} 2005, Dublin, Ireland, September 19-21, 2005, Revised
                  Selected Papers},
  series       = {Lecture Notes in Computer Science},
  volume       = {4015},
  pages        = {1--18},
  publisher    = {Springer},
  year         = {2005},
  doi          = {10.1007/11964681\_1},
  timestamp    = {Sat, 05 Sep 2020 18:01:20 +0200},
  biburl       = {https://dblp.org/rec/conf/ifl/CunhaPP05.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{PaCo,
  author       = {Chung{-}Kil Hur and
                  Georg Neis and
                  Derek Dreyer and
                  Viktor Vafeiadis},
  editor       = {Roberto Giacobazzi and
                  Radhia Cousot},
  title        = {The power of parameterization in coinductive proof},
  booktitle    = {The 40th Annual {ACM} {SIGPLAN-SIGACT} Symposium on Principles of
                  Programming Languages, {POPL} '13, Rome, Italy - January 23 - 25,
                  2013},
  pages        = {193--206},
  publisher    = {{ACM}},
  year         = {2013},
  doi          = {10.1145/2429069.2429093},
  timestamp    = {Thu, 24 Jun 2021 16:19:31 +0200},
  biburl       = {https://dblp.org/rec/conf/popl/HurNDV13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@article{Mendler91,
  author       = {Nax Paul Mendler},
  title        = {Inductive Types and Type Constraints in the Second-Order lambda Calculus},
  journal      = {Ann. Pure Appl. Log.},
  volume       = {51},
  number       = {1-2},
  pages        = {159--172},
  year         = {1991},
  doi          = {10.1016/0168-0072(91)90069-X},
  timestamp    = {Sun, 24 Sep 2023 00:12:53 +0200},
  biburl       = {https://dblp.org/rec/journals/apal/Mendler91.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/ifl/HinzeHJ10,
  author       = {Ralf Hinze and
                  Thomas Harper and
                  Daniel W. H. James},
  editor       = {Jurriaan Hage and
                  Marco T. Moraz{\'{a}}n},
  title        = {Theory and Practice of Fusion},
  booktitle    = {Implementation and Application of Functional Languages - 22nd International
                  Symposium, {IFL} 2010, Alphen aan den Rijn, The Netherlands, September
                  1-3, 2010, Revised Selected Papers},
  series       = {Lecture Notes in Computer Science},
  volume       = {6647},
  pages        = {19--37},
  publisher    = {Springer},
  year         = {2010},
  doi          = {10.1007/978-3-642-24276-2\_2},
  timestamp    = {Tue, 14 May 2019 10:00:35 +0200},
  biburl       = {https://dblp.org/rec/conf/ifl/HinzeHJ10.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{wadler88,
author = {Wadler, Philip},
title = {Deforestation: transforming programs to eliminate trees},
year = {1988},
issue_date = {June 22, 1990},
publisher = {Elsevier Science Publishers Ltd.},
address = {GBR},
volume = {73},
number = {2},
issn = {0304-3975},
doi = {10.1016/0304-3975(90)90147-A},
journal = {Theor. Comput. Sci.},
month = jan,
pages = {231â€“248},
numpages = {18}
}

@inproceedings{coutts07,
author = {Coutts, Duncan and Leshchinskiy, Roman and Stewart, Don},
title = {Stream fusion: from lists to streams to nothing at all},
year = {2007},
isbn = {9781595938152},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/1291151.1291199},
abstract = {This paper presents an automatic deforestation system, stream fusion, based on equational transformations, that fuses a wider range of functions than existing short-cut fusion systems. In particular, stream fusion is able to fuse zips, left folds and functions over nested lists, including list comprehensions. A distinguishing feature of the framework is its simplicity: by transforming list functions to expose their structure, intermediate values are eliminated by general purpose compiler optimisations.We have reimplemented the Haskell standard List library on top of our framework, providing stream fusion for Haskell lists. By allowing a wider range of functions to fuse, we see an increase in the number of occurrences of fusion in typical Haskell programs. We present benchmarks documenting time and space improvements.},
booktitle = {Proceedings of the 12th ACM SIGPLAN International Conference on Functional Programming},
pages = {315â€“326},
numpages = {12},
keywords = {program transformation, program optimisation, program fusion, functional programming, deforestation},
location = {Freiburg, Germany},
series = {ICFP '07}
}

@inproceedings{gill93,
author = {Gill, Andrew and Launchbury, John and Peyton Jones, Simon L.},
title = {A short cut to deforestation},
year = {1993},
isbn = {089791595X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/165180.165214},
booktitle = {Proceedings of the Conference on Functional Programming Languages and Computer Architecture},
pages = {223â€“232},
numpages = {10},
location = {Copenhagen, Denmark},
series = {FPCA '93}
}

@article{hughes89,
author = {Hughes, J.},
title = {Why functional programming matters},
year = {1989},
issue_date = {April 1989},
publisher = {Oxford University Press, Inc.},
address = {USA},
volume = {32},
number = {2},
issn = {0010-4620},
doi = {10.1093/comjnl/32.2.98},
journal = {Comput. J.},
month = apr,
pages = {98â€“107},
numpages = {10}
}

@article{DANVY_2022, title={Foldâ€“unfold lemmas for reasoning about recursive programs using the Coq proof assistant}, volume={32}, DOI={10.1017/S0956796822000107}, journal={Journal of Functional Programming}, author={DANVY, OLIVIER}, year={2022}, pages={e13}} <div></div>
@article{gill09,
author = {Gill, Andy and Hutton, Graham},
year = {2009},
month = {03},
pages = {},
title = {The worker/wrapper transformation},
volume = {19},
journal = {Journal of Functional Programming},
doi = {10.1017/S0956796809007175}
}

@article{SCULTHORPE_HUTTON_2014, title={Work it, wrap it, fix it, fold it}, volume={24}, DOI={10.1017/S0956796814000045}, number={1}, journal={Journal of Functional Programming}, author={Sculthorpe, Neil and Hutton, Graham}, year={2014}, pages={113â€“127}} <div></div>
@article{hutton10,
author = {Hutton, Graham and Jaskelioff, Mauro and Gill, Andy},
title = {Factorising folds for faster functions},
year = {2010},
issue_date = {July 2010},
publisher = {Cambridge University Press},
address = {USA},
volume = {20},
number = {3â€“4},
issn = {0956-7968},
doi = {10.1017/S0956796810000122},
abstract = {The worker/wrapper transformation is a general technique for improving the performance of recursive programs by changing their types. The previous formalisation (A. Gill \& G. Hutton, J. Funct. Program., vol. 19, 2009, pp. 227â€“251) was based upon a simple fixed-point semantics of recursion. In this paper, we develop a more structured approach, based upon initial-algebra semantics. In particular, we show how the worker/wrapper transformation can be applied to programs defined using the structured pattern of recursion captured by fold operators, and illustrate our new technique with a number of examples.},
journal = {J. Funct. Program.},
month = jul,
pages = {353â€“373},
numpages = {21}
}
@inproceedings{10.1145/3377555.3377884,
author = {Davies, Eleanor and Kalvala, Sara},
title = {Postcondition-preserving fusion of postorder tree transformations},
year = {2020},
isbn = {9781450371209},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/3377555.3377884},
abstract = {Tree transformations are common in applications such as program rewriting in compilers. Using a series of simple transformations to build a more complex system can make the resulting software easier to understand, maintain, and reason about. Fusion strategies for combining such successive tree transformations promote this modularity, whilst mitigating the performance impact from increased numbers of tree traversals. However, it is important to ensure that fused transformations still perform their intended tasks. Existing approaches to fusing tree transformations tend to take an informal approach to soundness, or be too restrictive to consider the kind of transformations needed in a compiler. We use postconditions to define a more useful formal notion of successful fusion, namely postcondition-preserving fusion. We also present criteria that are sufficient to ensure postcondition-preservation and facilitate modular reasoning about the success of fusion.},
booktitle = {Proceedings of the 29th International Conference on Compiler Construction},
pages = {191â€“200},
numpages = {10},
keywords = {modular reasoning, program rewriting, tree transformations},
location = {San Diego, CA, USA},
series = {CC 2020}
}
@article{10.1145/3133900,
author = {Sakka, Laith and Sundararajah, Kirshanthan and Kulkarni, Milind},
title = {TreeFuser: a framework for analyzing and fusing general recursive tree traversals},
year = {2017},
issue_date = {October 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {OOPSLA},
doi = {10.1145/3133900},
abstract = {Series of traversals of tree structures arise in numerous contexts: abstract syntax tree traversals in compiler passes, rendering traversals of the DOM in web browsers, kd-tree traversals in computational simulation codes. In each of these settings, a tree is traversed multiple times to compute various values and modify various portions of the tree. While it is relatively easy to write these traversals as separate small updates to the tree, for efficiency reasons, traversals are often manually fused to reduce the number of times that each portion of the tree is traversed: by performing multiple operations on the tree simultaneously, each node of the tree can be visited fewer times, increasing opportunities for optimization and decreasing cache pressure and other overheads. This fusion process is often done manually, requiring careful understanding of how each of traversals of the tree interact. This paper presents an automatic approach to traversal fusion: tree traversals can be written independently, and then our framework analyzes the dependences between the traversals to determine how they can be fused to reduce the number of visits to each node in the tree. A critical aspect of our framework is that it exploits two opportunities to increase the amount of fusion: i) it automatically integrates code motion, and ii) it supports partial fusion, where portions of one traversal can be fused with another, allowing for a reduction in node visits without requiring that two traversals be fully fused. We implement our framework in Clang, and show across several case studies that we can successfully fuse complex tree traversals, reducing the overall number of traversals and substantially improving locality and performance.},
journal = {Proc. ACM Program. Lang.},
month = oct,
articleno = {76},
numpages = {30},
keywords = {Recursive Tree Traversals, Locality Optimization, Fusion}
}
@article{DBLP:journals/pacmpl/SozeauM19,
  author       = {Matthieu Sozeau and
                  Cyprien Mangin},
  title        = {Equations reloaded: high-level dependently-typed functional programming
                  and proving in Coq},
  journal      = {Proc. {ACM} Program. Lang.},
  volume       = {3},
  number       = {{ICFP}},
  pages        = {86:1--86:29},
  year         = {2019},
  doi          = {10.1145/3341690},
  timestamp    = {Wed, 17 Feb 2021 08:54:04 +0100},
  biburl       = {https://dblp.org/rec/journals/pacmpl/SozeauM19.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{DBLP:conf/icfp/Sozeau07,
  author       = {Matthieu Sozeau},
  editor       = {Ralf Hinze and
                  Norman Ramsey},
  title        = {Program-ing finger trees in Coq},
  booktitle    = {Proceedings of the 12th {ACM} {SIGPLAN} International Conference on
                  Functional Programming, {ICFP} 2007, Freiburg, Germany, October 1-3,
                  2007},
  pages        = {13--24},
  publisher    = {{ACM}},
  year         = {2007},
  doi          = {10.1145/1291151.1291156},
  timestamp    = {Fri, 25 Jun 2021 14:48:54 +0200},
  biburl       = {https://dblp.org/rec/conf/icfp/Sozeau07.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@article{DBLP:journals/jfp/MuKJ09,
  author       = {Shin{-}Cheng Mu and
                  Hsiang{-}Shang Ko and
                  Patrik Jansson},
  title        = {Algebra of programming in Agda: Dependent types for relational program
                  derivation},
  journal      = {J. Funct. Program.},
  volume       = {19},
  number       = {5},
  pages        = {545--579},
  year         = {2009},
  doi          = {10.1017/S0956796809007345},
  timestamp    = {Mon, 28 Aug 2023 21:42:08 +0200},
  biburl       = {https://dblp.org/rec/journals/jfp/MuKJ09.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@incollection{WinskelM95,
    author = {Winskel, Glynn and Nielsen, Mogens},
    isbn = {9780198537809},
    title = {Models for concurrency},
    booktitle = {Handbook of Logic in Computer Science},
    publisher = {Oxford University Press},
    year = {1995},
    month = {05},
    abstract = {The purpose of this chapter is to provide a survey of the fundamental models for distributed computations used and studied within theoretical computer science. Such models have the nature of mathematical formalisms in which to describe and reason about the behaviour of distributed computational systems. Their purpose is to provide an understanding of systems and their behaviour in theory, and to contribute to methods of design and analysis in practice.},
    doi = {10.1093/oso/9780198537809.003.0001},
    eprint = {https://academic.oup.com/book/0/chapter/421962123/chapter-pdf/52352653/isbn-9780198537809-book-part-1.pdf},
}
@article{Wadler90,
  author       = {Philip Wadler},
  title        = {Deforestation: Transforming Programs to Eliminate Trees},
  journal      = {Theor. Comput. Sci.},
  volume       = {73},
  number       = {2},
  pages        = {231--248},
  year         = {1990},
  doi          = {10.1016/0304-3975(90)90147-A},
  timestamp    = {Wed, 17 Feb 2021 21:57:56 +0100},
  biburl       = {https://dblp.org/rec/journals/tcs/Wadler90.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@article{Sozeau09,
  author       = {Matthieu Sozeau},
  title        = {A New Look at Generalized Rewriting in Type Theory},
  journal      = {J. Formaliz. Reason.},
  volume       = {2},
  number       = {1},
  pages        = {41--62},
  year         = {2009},
  doi          = {10.6092/ISSN.1972-5787/1574},
  timestamp    = {Thu, 24 Sep 2020 13:05:55 +0200},
  biburl       = {https://dblp.org/rec/journals/jfrea/Sozeau09.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{CockxME0N22,
  author       = {Jesper Cockx and
                  Orestis Melkonian and
                  Lucas Escot and
                  James Chapman and
                  Ulf Norell},
  editor       = {Nadia Polikarpova},
  title        = {Reasonable Agda is correct Haskell: writing verified Haskell using
                  agda2hs},
  booktitle    = {Haskell '22: 15th {ACM} {SIGPLAN} International Haskell Symposium,
                  Ljubljana, Slovenia, September 15 - 16, 2022},
  pages        = {108--122},
  publisher    = {{ACM}},
  year         = {2022},
  doi          = {10.1145/3546189.3549920},
  timestamp    = {Thu, 20 Oct 2022 17:40:16 +0200},
  biburl       = {https://dblp.org/rec/conf/haskell/CockxME0N22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
